
plugins {
  id 'org.springframework.boot' version '2.1.2.RELEASE' apply true
  id "io.spring.dependency-management" version "1.0.6.RELEASE"
  id 'io.franzbecker.gradle-lombok' version '2.0'
  id 'java'
  id 'idea'
  id 'com.gorylenko.gradle-git-properties' version '2.0.0'
  id 'com.avast.gradle.docker-compose' version '0.8.13'
  id 'com.google.cloud.tools.jib' version '1.0.0'
  id "ca.cutterslade.helm" version "1.0.0-beta-9"
}

ext {
  set('springCloudVersion', 'Greenwich.RELEASE')
  set('activeSpringProfiles', 'local')
}

group = 'com.gregturnquist.learningspringboot'
version = '0.0.1-SNAPSHOT'

repositories {
  mavenCentral()
  maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
  // implementation platform('org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE')
  // enforce versions defined in bom
  implementation enforcedPlatform('org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE')
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.cloud:spring-cloud-starter-config'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
  implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
  implementation 'javax.xml.bind:jaxb-api:2.3.1'
  implementation 'com.sun.xml.bind:jaxb-impl:2.3.1'
  implementation 'com.squareup.okhttp3:okhttp:3.11.0'
  runtimeOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

lombok {
  version = '1.18.4'
  sha256 = ""
}

repositories {
  jcenter()
}

bootJar {
  baseName = 'lsb2-eureka-server'
  version = ''
  excludeDevtools = false
}

helm {
  install {
    // allows configuration of various details of the helm installation managed
    // by the plugin. The only option that is likely to require customisation
    // is the helm version to use. Each version of the plugin will default to
    // the newest version of helm available at the time.
    version = 'v2.13.0'
  }
  repository {
    // allows configuration of the repository to which the publish tasks will
    // upload the packaged chart.
    type 'chartmuseum'
    url 'http://chartmuseum.local.svc.cluster.local/api/charts'
    // username 'myusername'
    // password 'isasecret'
    // authRealm 'repository authentication realm'
    requestHeaders = [
      ['HeaderName:', 'header value'],
      ['OtherHeader:', 'other value']
    ]
//    clientConfigurator = { OkHttpClient.Builder builder ->
//      // Allows arbitrary configuration of the HTTP client
//    }
  }
}

charts {
  // The charts extension allows you to define an arbitrary number of charts
  // which the plugin will manage. Each chart is defined in a block using the
  // name of the chart; the generated task names depend on the chart name.
  lsb2EurekaServer {
    // Within the chart block, a few options can be defined:
    
    // If not set, the chart version defaults to the project version. Note
    // that helm requires charts use symantic versioning, so if your project
    // does not, you will have to define a version like this.
    //chartVersion '1.2.3'
    
    // If not set, the app version defaults to the project version. Helm does
    // not enforce any requirements on the app version
    // appVersion '1.2.3.down-with^semver'
    
    // If not set, the chart directory defaults to
    // 'src/helm/resources/${chartName}'. If the chart directory is outside of
    // 'src/helm/resources' extra configuration will be required to have the
    // chart files processed into the helm source set output directory.
    // chartDir "src/main/helm/lsb2-eureka-server"
    
    // Each chart can include configuration which changes how the chart is
    // validated by the lint command.
    // lint.values = ['valueKey':'some value']
    // lint.valuesFiles = ['lint-values.yaml']
  }
}

/*
 * docker-compose plugin configuration.
 * Details on https://github.com/avast/gradle-docker-compose-plugin
 */
dockerCompose {
  useComposeFiles = ['docker/env/local.yml'] // like 'docker-compose -f <file>'; default is empty
  // startedServices = ['web'] // list of services to execute when calling 'docker-compose up' or 'docker-compose pull' (when not specified, all services are executed)
  // scale = [${serviceName1}: 5, ${serviceName2}: 2] // Pass docker compose --scale option like 'docker-compose up --scale serviceName1=5 --scale serviceName2=2'
  // forceRecreate = false // pass '--force-recreate' when calling 'docker-compose up' when set to 'true`
  buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true
  // ignorePullFailure = false // when set to true, pass '--ignore-pull-failure' to 'docker-compose pull'
  // buildAdditionalArgs = ['--force-rm']
  // pullAdditionalArgs = ['--ignore-pull-failures']
  // upAdditionalArgs = ['--no-deps']
  // downAdditionalArgs = ['--some-switch']

  waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
  captureContainersOutput = true // if true, prints output of all containers to Gradle output - very useful for debugging; default is false
  // captureContainersOutputToFile = '/path/to/logFile' // sends output of all containers to a log file

  stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
  removeContainers = true
  // removeImages = "None" // Other accepted values are: "All" and "Local"
  // removeVolumes = true
  removeOrphans = false // removes containers for services not defined in the Compose file

  // projectName = 'my-project' // allow to set custom docker-compose project name (defaults to directory name)
  // executable = '/path/to/docker-compose' // allow to set the path of the docker-compose executable (useful if not present in PATH)
  // dockerExecutable = '/path/to/docker' // allow to set the path of the docker executable (useful if not present in PATH)
  // dockerComposeWorkingDirectory = '/path/where/docker-compose/is/invoked/from'
  // dockerComposeStopTimeout = java.time.Duration.ofSeconds(20) // time before docker-compose sends SIGTERM to the running containers after the composeDown task has been started
  // environment.put 'BACKEND_ADDRESS', '192.168.1.100' // Pass environment variable to 'docker-compose' for substitution in compose file
}
composeBuild.dependsOn bootJar
composeUp.dependsOn composeBuild
composePush.dependsOn composeBuild

jib {
  from {
    image = 'openjdk:8-jre-alpine'
  }
  to {
    image = "jghamburg/lsb2-eureka-server:local"
//    credHelper = 'osxkeychain'
  }
  container {
    jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Xms512m', '-Xdebug', '-Dspring.profiles.active=local']
    mainClass = 'com.greglturnquist.learningspringboot.LearningSpringBootEurekaServerApplication'
    args = []
    ports = ['8080']
    format = 'OCI'
  }
}

