
plugins {
  id 'org.springframework.boot' version '2.1.10.RELEASE' apply true
  id "io.spring.dependency-management" version "1.0.8.RELEASE"
  id 'io.franzbecker.gradle-lombok' version '3.0.0'
  id 'java'
  id 'idea'
  id 'com.avast.gradle.docker-compose' version '0.9.4'
  id 'com.google.cloud.tools.jib' version '1.5.1'

  id 'org.unbroken-dome.helm' version '0.4.0'
  id 'org.unbroken-dome.helm-publish' version '0.4.0'
  id 'org.unbroken-dome.helm-releases' version '0.4.0'

  id 'se.patrikerdes.use-latest-versions' version '0.2.12'
  id 'com.github.ben-manes.versions' version '0.24.0'

  id 'maven-publish'
}

ext {
  set('activeSpringProfiles', 'local')
  set('tag', 'local')
  set('chartRepoUrl', 'http://chartmuseum.default.svc.cluster.local/')
}

group = 'com.gregturnquist.learningspringboot'

repositories {
  mavenCentral()
  maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
  // implementation platform('org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE')
  // enforce versions defined in bom
  implementation enforcedPlatform('org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR4')
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.cloud:spring-cloud-starter-config'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
  implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
  implementation 'javax.xml.bind:jaxb-api:2.3.1'
  implementation 'com.sun.xml.bind:jaxb-impl:2.3.1'
  implementation 'com.squareup.okhttp3:okhttp:3.11.0'
  runtimeOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
}

sourceCompatibility = 11
targetCompatibility = 11

lombok {
  version = '1.18.4'
  sha256 = ""
}

repositories {
  jcenter()
}

bootJar {
  baseName = 'lsb2-eureka-server'
  excludeDevtools = false
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.gregturnquist.learningspringboot'
            from components.java
        }
    }
}

helm {
  // basic helm plugin config
  home = file("${project.buildDir}/helm/home")
  outputDir = file("${project.buildDir}/helm")
  lint {
      // treat linter warnings as errors (failing the build)
      strict = false
      enabled = true
  }
  filtering {
    // This value will be resolvable in all charts' YAML files as ${authorName}
    values.put 'authorName', 'Developer'
    values.put 'image.tag', project.version.toString()
  }
  charts {
    'lsb2-eureka-server' {
        chartName = project.name
        chartVersion = project.version.toString()
        sourceDir = file('src/main/helm/lsb2-eureka-server')
    }
  }
  repositories {
      museum {
          url = uri(chartRepoUrl)
      }
  }
  // helm-release plugin config
  releases {
      'lsb2-eureka-server' {
          from charts.'lsb2-eureka-server'
          namespace = 'local'
          replace = false
          purge = true
          dryRun = false
          wait = false
          // pass values (like --set on the command line)
          values = [ 'image.tag': project.version ]
          // pass value files (like -f on the command line)
          valueFiles.from "src/main/helm/lsb2-eureka-server/values.yaml"
          valueFiles.from "src/main/helm/lsb2-eureka-server/values-${activeSpringProfiles}.yaml"
      }
  }
  // helm-publish plugin config
  publishing {
      repositories {
          museum {
              url = uri(chartRepoUrl)
          }
      }
  }  
}

/*
 * docker-compose plugin configuration.
 * Details on https://github.com/avast/gradle-docker-compose-plugin
 */
dockerCompose {
  useComposeFiles = ['docker/env/local.yml'] // like 'docker-compose -f <file>'; default is empty
  buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true

  waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
  captureContainersOutput = true // if true, prints output of all containers to Gradle output - very useful for debugging; default is false

  stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
  removeContainers = true
  removeOrphans = false // removes containers for services not defined in the Compose file

  environment.put 'TAG', version
}

composeBuild.dependsOn bootJar
composeUp.dependsOn composeBuild
composePush.dependsOn composeBuild

jib {
  from {
    image = 'azul/zulu-openjdk-alpine:11.0.3'
  }
  to {
    image = "jghamburg/lsb2-eureka-server:local"
//    credHelper = 'osxkeychain'
  }
  container {
    jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Xms512m', '-Xdebug', '-Dspring.profiles.active=local']
    mainClass = 'com.greglturnquist.learningspringboot.LearningSpringBootEurekaServerApplication'
    args = []
    ports = ['8080']
    format = 'OCI'
    useCurrentTimestamp = true
  }
}

task semanticRelease (type: Exec){
  workingDir '.'
  commandLine 'semantic-release', '-b', 'master', '--no-ci'
}

task verifySemanticRelease (type: Exec){
  workingDir '.'
  commandLine 'semantic-release', '-b', 'master'
}
